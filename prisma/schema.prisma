generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(CLIENT)
  avatar    String?
  fcmToken  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  orders    Order[]
  reviews   Review[]
  stores    Store[]
  cartItems CartItem[]
  couponUsages CouponUsage[]
  notifications Notification[]
  notificationHistory NotificationHistory[]
  notificationPreferences NotificationPreferences?
  uploads Upload[]
  clientChatRooms ChatRoom[] @relation("ClientChatRooms")
  storeChatRooms ChatRoom[] @relation("StoreChatRooms")
  chatMessages ChatMessage[]
  histories History[]

  @@map("users")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Store {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  phone                String
  email                String
  address              Json
  deliveryRadius       Float
  estimatedDeliveryTime Int
  minimumOrderValue    Float
  isOpen               Boolean  @default(true)
  logo                 String?
  coverImage           String?
  isActive             Boolean  @default(true)
  isApproved           Boolean  @default(false)
  averageRating        Float    @default(0)
  totalReviews         Int      @default(0)
  ownerId              String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  owner    User       @relation(fields: [ownerId], references: [id])
  products Product[]
  orders   Order[]
  reviews  Review[]
  coupons  Coupon[]

  @@map("stores")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  price           Decimal  @db.Decimal(10, 2)
  categoryId      String
  storeId         String
  isAvailable     Boolean  @default(true)
  preparationTime Int?
  ingredients     String[]
  allergens       String[]
  images          String[]
  isVegetarian    Boolean  @default(false)
  isVegan         Boolean  @default(false)
  isGlutenFree    Boolean  @default(false)
  nutritionalInfo Json
  averageRating   Float    @default(0)
  totalReviews    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  store      Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category   Category         @relation(fields: [categoryId], references: [id])
  variations ProductVariation[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductVariation {
  id        String @id @default(cuid())
  name      String
  price     Decimal @db.Decimal(10, 2)
  isActive  Boolean @default(true)
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variations")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  storeId      String
  addressId    String
  status       OrderStatus @default(PENDING)
  total        Decimal     @db.Decimal(10, 2)
  deliveryFee  Decimal     @db.Decimal(10, 2) @default(0)
  subtotal     Decimal     @db.Decimal(10, 2)
  paymentMethod String
  paymentStatus String     @default("pending")
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  store     Store       @relation(fields: [storeId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  couponUsages CouponUsage[]
  chatRoom  ChatRoom?
  reviews   Review[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  notes     String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  type          CouponType
  value         Decimal    @db.Decimal(10, 2)
  minOrderValue Decimal?   @db.Decimal(10, 2)
  maxUses       Int?
  usedCount     Int        @default(0)
  isActive      Boolean    @default(true)
  validFrom     DateTime
  validUntil    DateTime
  storeId       String?
  createdAt     DateTime   @default(now())

  store Store? @relation(fields: [storeId], references: [id])
  usages CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id              String   @id @default(cuid())
  couponId        String
  userId          String
  orderId         String
  discountApplied Decimal  @db.Decimal(10, 2)
  usedAt          DateTime @default(now())

  coupon Coupon @relation(fields: [couponId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@map("coupon_usages")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  storeId   String
  orderId   String?
  rating    Int
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("reviews")
}

enum UserRole {
  CLIENT
  STORE_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED
  FREE_DELIVERY
}

model Notification {
  id          String            @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  channels    NotificationChannel[]
  status      NotificationStatus @default(PENDING)
  priority    NotificationPriority @default(NORMAL)
  data        Json              @default("{}")
  scheduledAt DateTime
  sentAt      DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationHistory {
  id           String            @id @default(cuid())
  userId       String
  type         NotificationType
  channel      NotificationChannel
  title        String
  message      String
  status       NotificationStatus
  sentAt       DateTime?
  errorMessage String?
  createdAt    DateTime          @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_history")
}

model NotificationTemplate {
  id           String            @id @default(cuid())
  name         String
  type         NotificationType  @unique
  subject      String
  title        String
  message      String
  htmlTemplate String?
  textTemplate String?
  variables    String[]
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("notification_templates")
}

model NotificationPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  pushEnabled   Boolean  @default(true)
  emailEnabled  Boolean  @default(true)
  smsEnabled    Boolean  @default(false)
  orderUpdates  Boolean  @default(true)
  promotions    Boolean  @default(true)
  systemAlerts  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum NotificationType {
  ORDER_CONFIRMED
  ORDER_PREPARING
  ORDER_READY
  ORDER_OUT_FOR_DELIVERY
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  COUPON_AVAILABLE
  PROMOTION
  SYSTEM_ALERT
  WELCOME
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
}

enum NotificationChannel {
  PUSH
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum UploadFolder {
  AVATARS
  PRODUCTS
  STORES
  CATEGORIES
  BANNERS
  TEMP
}

model Upload {
  id           String   @id @default(cuid())
  userId       String
  key          String   @unique
  url          String
  bucket       String
  size         Int
  mimeType     String
  originalName String
  folder       String
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("uploads")
}

model ChatRoom {
  id        String   @id @default(cuid())
  orderId   String   @unique
  clientId  String
  storeId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order  Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  client User         @relation("ClientChatRooms", fields: [clientId], references: [id], onDelete: Cascade)
  store  User         @relation("StoreChatRooms", fields: [storeId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id          String      @id @default(cuid())
  roomId      String
  senderId    String
  senderType  SenderType
  message     String
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  metadata    Json        @default("{}")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum SenderType {
  CLIENT
  STORE
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

model History {
  id          String       @id @default(cuid())
  userId      String?
  entityType  HistoryEntity
  entityId    String
  action      HistoryAction
  description String
  metadata    Json         @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("histories")
}

enum HistoryAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VIEW
  EXPORT
  PAYMENT
  STATUS_CHANGE
  MESSAGE_SENT
  REVIEW_CREATED
  CACHE_INVALIDATED
}

enum HistoryEntity {
  USER
  STORE
  PRODUCT
  ORDER
  CART
  COUPON
  REVIEW
  CHAT_ROOM
  CHAT_MESSAGE
  CATEGORY
  SYSTEM
}